// FLTK GUI related functions
//
// Copyright 2007 by Daniel Noethen.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2, or (at your option)
// any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//

#include <string.h>
#include <errno.h>
#include <unistd.h>
#include <signal.h>
#include <time.h>

#ifndef _WIN32
 #include <sys/wait.h>
#endif
#include "cfg.h"
#include "butt.h"
#include "port_audio.h"
#include "timer.h"
#include "flgui.h"
#include "fl_funcs.h"
#include "shoutcast.h"

void fill_cfg_widgets()
{

    unsigned int i;
    char dummy[50];

    unsigned int bitrate[15] = { 32, 40, 48, 56, 64, 80, 96, 112,
                                128, 160, 192, 224, 256, 320, 0 };

    //fill the main section
    for(i = 0; i < cfg.main.num_of_srv; i++)
    {
        fl_g->choice_cfg_act_srv->add(cfg.srv[i]->name);
        fl_g->choice_cfg_edit_srv->add(cfg.srv[i]->name);
    }

    for(i = 0; i < cfg.main.num_of_icy; i++)
    {
        fl_g->choice_cfg_act_icy->add(cfg.icy[i]->name);
        fl_g->choice_cfg_edit_icy->add(cfg.icy[i]->name);
    }

    fl_g->choice_cfg_act_srv->value(cfg.selected_srv);
    fl_g->choice_cfg_act_icy->value(cfg.selected_icy);

    fl_g->input_cfg_song->value(cfg.main.song);


    //fill the server sections
    if(cfg.main.num_of_srv > 0)
    {
        fl_g->choice_cfg_edit_srv->value(cfg.selected_srv);

        fl_g->input_cfg_addr->value(cfg.srv[cfg.selected_srv]->addr);

        snprintf(dummy, 6, "%u", cfg.srv[cfg.selected_srv]->port);
        fl_g->input_cfg_port->value(dummy);
        fl_g->input_cfg_passwd->value(cfg.srv[cfg.selected_srv]->pwd);


        if(cfg.srv[cfg.selected_srv]->type == SHOUTCAST)
        {
            fl_g->radio_cfg_shoutcast->value(1);
            fl_g->radio_cfg_icecast->value(0);

            fl_g->input_cfg_port->activate();
            fl_g->input_cfg_mount->activate();
            fl_g->input_cfg_addr->activate();
            fl_g->input_cfg_passwd->activate();
            fl_g->radio_cfg_shoutcast->activate();

            fl_g->input_cfg_mount->deactivate();
        }
        if(cfg.srv[cfg.selected_srv]->type == ICECAST)
        {
            fl_g->radio_cfg_icecast->value(1);
            fl_g->radio_cfg_shoutcast->value(0);
            fl_g->input_cfg_mount->activate();
            fl_g->input_cfg_mount->value(cfg.srv[cfg.selected_srv]->mount);
        }
        if(!fl_g->group_cfg_server->active())
            fl_g->group_cfg_server->activate();
    }
    else
        fl_g->group_cfg_server->deactivate();

    //fill the audio section
    fl_g->choice_cfg_cat->value(0);

    if(cfg.rec.start_rec)
        fl_g->check_cfg_rec->value(1);
    else
        fl_g->check_cfg_rec->value(0);

    for(i = 0; (int)i < cfg.audio.dev_count; i++)
    {
        fl_g->choice_cfg_dev->add(cfg.audio.pcm_list[i]->name);

    }
    fl_g->choice_cfg_dev->value(cfg.audio.dev_num);


    if(!strcmp(cfg.audio.codec, "mp3"))
    {
            fl_g->radio_cfg_codec_mp3->value(1);
            fl_g->radio_cfg_codec_ogg->value(0);
    }
    else if(!strcmp(cfg.audio.codec, "ogg"))
    {
           fl_g->radio_cfg_codec_ogg->value(1);
           fl_g->radio_cfg_codec_mp3->value(0);
    }

    if(cfg.audio.channel == 1)
    {
            fl_g->radio_cfg_channel_mono->value(1);
            fl_g->radio_cfg_channel_stereo->value(0);
    }
    else if(cfg.audio.channel == 2)
    {
            fl_g->radio_cfg_channel_stereo->value(1);
            fl_g->radio_cfg_channel_mono->value(0);
    }


    for(i = 0; bitrate[i] != 0; i++)
        if(cfg.audio.bitrate == bitrate[i])
            fl_g->choice_cfg_bitrate->value(i);



    //fill the icy sections
    if(cfg.main.num_of_icy > 0)
    {
        fl_g->choice_cfg_edit_icy->value(cfg.selected_icy);

        fl_g->input_cfg_desc->value(cfg.icy[cfg.selected_icy]->desc);
        fl_g->input_cfg_genre->value(cfg.icy[cfg.selected_icy]->genre);
        fl_g->input_cfg_url->value(cfg.icy[cfg.selected_icy]->url);
        fl_g->input_cfg_irc->value(cfg.icy[cfg.selected_icy]->irc);
        fl_g->input_cfg_icq->value(cfg.icy[cfg.selected_icy]->icq);
        fl_g->input_cfg_aim->value(cfg.icy[cfg.selected_icy]->aim);

        if(!strcmp(cfg.icy[cfg.selected_icy]->pub, "1"))
            fl_g->check_cfg_pub->value(1);
        else
            fl_g->check_cfg_pub->value(0);

        if(!fl_g->group_cfg_icy->active())
            fl_g->group_cfg_icy->activate();
    }
    else
        fl_g->group_cfg_icy->deactivate();
}

void print_info(const char* info, int info_type)
{
    char timebuf[10];
    time_t test;

    struct tm  *mytime;
    static struct tm time_bak;


    test = time(NULL);
    mytime = localtime(&test);

    if( (time_bak.tm_min != mytime->tm_min) || (time_bak.tm_hour != mytime->tm_hour) )
    {

        time_bak.tm_min = mytime->tm_min;
        time_bak.tm_hour = mytime->tm_hour;
        strftime(timebuf, sizeof(timebuf), "\n%H:%M:", mytime);
        fl_g->info_buffer->append(timebuf);
    }

    fl_g->info_buffer->append((const char*)"\n");
    fl_g->info_buffer->append((const char*)info);

    //always scroll to the last line
    fl_g->info_output->scroll(fl_g->info_buffer->count_lines(0,     //count the lines from char 0 to the last character
                            fl_g->info_buffer->length()),           //returns the number of characters in the buffer
                            0);
}
void print_lcd(const char *text, int len, int home, int clear)
{
    if(clear)
        fl_g->lcd->clear();

    fl_g->lcd->print((const uchar*)text, len);

    if(home)
        fl_g->lcd->cursor_pos(0);
}

void check_xrun(void*)
{
    if(snd_xrun)
        fl_g->xrun->value(1);
    else
        fl_g->xrun->value(0);

    Fl::repeat_timeout(0.01, &check_xrun);

}
void check_frames(void*)
{
    if(pa_new_frames)
        snd_update_vu();

    Fl::repeat_timeout(0.01, &check_frames);

}
void check_time(void*)
{
    char lcd_text_buf[33];

    if(display_info == DATA)
       sprintf(lcd_text_buf, "status: on air\nsent: %dkb",
                             network_bytes_sent / 1024);

    if(timer_new_time() && display_info == TIME)
        sprintf(lcd_text_buf, "status: on air\ntime: %s",
                              timer_get_time());

    print_lcd(lcd_text_buf, strlen(lcd_text_buf), 0, 1);

    Fl::repeat_timeout(0.1, &check_time);
}

void check_if_disconnected(void*)
{
    if(!connected)
    {
        print_info("ERROR: server has closed the connection\nreconnecting ...", 1);
        if(cfg.srv[cfg.selected_srv]->type == SHOUTCAST)
            sc_disconnect();
#if HAVE_LIBSHOUT
        else
            ic_disconnect();
#endif
        Fl::remove_timeout(&check_time);
        Fl::remove_timeout(&check_xrun);
        Fl::remove_timeout(&check_if_disconnected);

        button_connect_cb();

        return;
    }

    Fl::repeat_timeout(0.5, &check_if_disconnected);
}

void vu_meter(short left, short right)
{

    static int left_delay[9] = { DELAY };
    static int right_delay[9] = { DELAY };


    if(left < 0)
        left *=-1;
    if(right < 0)
        right *=-1;


    if(left > TRESHOLD_1)
    {
        fl_g->left_1->value(1);
    }
    else
    {
        if(!left_delay[0])
        {
            fl_g->left_1->value(0);
            fl_g->left_2->value(0);
            fl_g->left_3->value(0);
            fl_g->left_4->value(0);
            fl_g->left_5->value(0);
            fl_g->left_6->value(0);
            fl_g->left_7->value(0);
            fl_g->left_8->value(0);
            fl_g->left_9->value(0);

            for(int i = 0; i < 9; i++)
                left_delay[i] = DELAY;

        }
        else
            left_delay[0]--;
    }


    if(left > TRESHOLD_2)
    {
        fl_g->left_1->value(1);
        fl_g->left_2->value(1);

    }
    else
    {
        if(!left_delay[1])
        {
            fl_g->left_2->value(0);
            fl_g->left_3->value(0);
            fl_g->left_4->value(0);
            fl_g->left_5->value(0);
            fl_g->left_6->value(0);
            fl_g->left_7->value(0);
            fl_g->left_8->value(0);
            fl_g->left_9->value(0);

            for(int i = 1; i < 9; i++)
                left_delay[i] = DELAY;

        }
        else
            left_delay[1]--;
    }

    if(left > TRESHOLD_3)
    {
        fl_g->left_1->value(1);
        fl_g->left_2->value(1);
        fl_g->left_3->value(1);

    }
    else
    {
        if(!left_delay[2])
        {
            fl_g->left_3->value(0);
            fl_g->left_4->value(0);
            fl_g->left_5->value(0);
            fl_g->left_6->value(0);
            fl_g->left_7->value(0);
            fl_g->left_8->value(0);
            fl_g->left_9->value(0);

            for(int i = 2; i < 9; i++)
                left_delay[i] = DELAY;

        }
        else
            left_delay[2]--;
    }

    if(left > TRESHOLD_4)
    {
        fl_g->left_1->value(1);
        fl_g->left_2->value(1);
        fl_g->left_3->value(1);
        fl_g->left_4->value(1);

    }
    else
    {
        if(!left_delay[3])
        {
            fl_g->left_4->value(0);
            fl_g->left_5->value(0);
            fl_g->left_6->value(0);
            fl_g->left_7->value(0);
            fl_g->left_8->value(0);
            fl_g->left_9->value(0);

            for(int i = 3; i < 9; i++)
                left_delay[i] = DELAY;

        }
        else
            left_delay[3]--;
    }

    if(left > TRESHOLD_5)
    {
        fl_g->left_1->value(1);
        fl_g->left_2->value(1);
        fl_g->left_3->value(1);
        fl_g->left_4->value(1);
        fl_g->left_5->value(1);

    }
    else
    {
        if(!left_delay[4])
        {
            fl_g->left_5->value(0);
            fl_g->left_6->value(0);
            fl_g->left_7->value(0);
            fl_g->left_8->value(0);
            fl_g->left_9->value(0);

            for(int i = 4; i < 9; i++)
                left_delay[i] = DELAY;

        }
        else
            left_delay[4]--;
    }

    if(left > TRESHOLD_6)
    {
        fl_g->left_1->value(1);
        fl_g->left_2->value(1);
        fl_g->left_3->value(1);
        fl_g->left_4->value(1);
        fl_g->left_5->value(1);
        fl_g->left_6->value(1);

    }
    else
    {
        if(!left_delay[5])
        {
            fl_g->left_6->value(0);
            fl_g->left_7->value(0);
            fl_g->left_8->value(0);
            fl_g->left_9->value(0);

            for(int i = 5; i < 9; i++)
                left_delay[i] = DELAY;

        }
        else
            left_delay[5]--;
    }

    if(left > TRESHOLD_7)
    {
        fl_g->left_1->value(1);
        fl_g->left_2->value(1);
        fl_g->left_3->value(1);
        fl_g->left_4->value(1);
        fl_g->left_5->value(1);
        fl_g->left_6->value(1);
        fl_g->left_7->value(1);

    }
    else
    {
        if(!left_delay[6])
        {
            fl_g->left_7->value(0);
            fl_g->left_8->value(0);
            fl_g->left_9->value(0);
            for(int i = 6; i < 9; i++)
                left_delay[i] = DELAY;

        }
        else
            left_delay[6]--;
    }
    if(left > TRESHOLD_8)
    {
        fl_g->left_1->value(1);
        fl_g->left_2->value(1);
        fl_g->left_3->value(1);
        fl_g->left_4->value(1);
        fl_g->left_5->value(1);
        fl_g->left_6->value(1);
        fl_g->left_7->value(1);
        fl_g->left_8->value(1);

    }
    else
    {
        if(!left_delay[7])
        {
            fl_g->left_8->value(0);
            fl_g->left_9->value(0);

             for(int i = 7; i < 9; i++)
                left_delay[i] = DELAY;

        }
        else
            left_delay[7]--;
    }

    if(left > TRESHOLD_9)
    {
        fl_g->left_1->value(1);
        fl_g->left_2->value(1);
        fl_g->left_3->value(1);
        fl_g->left_4->value(1);
        fl_g->left_5->value(1);
        fl_g->left_6->value(1);
        fl_g->left_7->value(1);
        fl_g->left_8->value(1);
        fl_g->left_9->value(1);
    }
    else
    {
        if(!left_delay[8])
        {
            fl_g->left_9->value(0);
            left_delay[8] = DELAY;
        }
        else
            left_delay[8]--;
    }


    if(right > TRESHOLD_1)
    {
        fl_g->right_1->value(1);
    }
    else
    {
        if(!right_delay[0])
        {
            fl_g->right_1->value(0);
            fl_g->right_2->value(0);
            fl_g->right_3->value(0);
            fl_g->right_4->value(0);
            fl_g->right_5->value(0);
            fl_g->right_6->value(0);
            fl_g->right_7->value(0);
            fl_g->right_8->value(0);
            fl_g->right_9->value(0);

            for(int i = 0; i < 9; i++)
                right_delay[i] = DELAY;

        }
        else
            right_delay[0]--;
    }


    if(right > TRESHOLD_2)
    {
        fl_g->right_1->value(1);
        fl_g->right_2->value(1);

    }
    else
    {
        if(!right_delay[1])
        {
            fl_g->right_2->value(0);
            fl_g->right_3->value(0);
            fl_g->right_4->value(0);
            fl_g->right_5->value(0);
            fl_g->right_6->value(0);
            fl_g->right_7->value(0);
            fl_g->right_8->value(0);
            fl_g->right_9->value(0);

            for(int i = 1; i < 9; i++)
                right_delay[i] = DELAY;

        }
        else
            right_delay[1]--;
    }

    if(right > TRESHOLD_3)
    {
        fl_g->right_1->value(1);
        fl_g->right_2->value(1);
        fl_g->right_3->value(1);

    }
    else
    {
        if(!right_delay[2])
        {
            fl_g->right_3->value(0);
            fl_g->right_4->value(0);
            fl_g->right_5->value(0);
            fl_g->right_6->value(0);
            fl_g->right_7->value(0);
            fl_g->right_8->value(0);
            fl_g->right_9->value(0);

            for(int i = 2; i < 9; i++)
                right_delay[i] = DELAY;

        }
        else
            right_delay[2]--;
    }

    if(right > TRESHOLD_4)
    {
        fl_g->right_1->value(1);
        fl_g->right_2->value(1);
        fl_g->right_3->value(1);
        fl_g->right_4->value(1);

    }
    else
    {
        if(!right_delay[3])
        {
            fl_g->right_4->value(0);
            fl_g->right_5->value(0);
            fl_g->right_6->value(0);
            fl_g->right_7->value(0);
            fl_g->right_8->value(0);
            fl_g->right_9->value(0);

            for(int i = 3; i < 9; i++)
                right_delay[i] = DELAY;

        }
        else
            right_delay[3]--;
    }

    if(right > TRESHOLD_5)
    {
        fl_g->right_1->value(1);
        fl_g->right_2->value(1);
        fl_g->right_3->value(1);
        fl_g->right_4->value(1);
        fl_g->right_5->value(1);

    }
    else
    {
        if(!right_delay[4])
        {
            fl_g->right_5->value(0);
            fl_g->right_6->value(0);
            fl_g->right_7->value(0);
            fl_g->right_8->value(0);
            fl_g->right_9->value(0);

            for(int i = 4; i < 9; i++)
                right_delay[i] = DELAY;

        }
        else
            right_delay[4]--;
    }

    if(right > TRESHOLD_6)
    {
        fl_g->right_1->value(1);
        fl_g->right_2->value(1);
        fl_g->right_3->value(1);
        fl_g->right_4->value(1);
        fl_g->right_5->value(1);
        fl_g->right_6->value(1);

    }
    else
    {
        if(!right_delay[5])
        {
            fl_g->right_6->value(0);
            fl_g->right_7->value(0);
            fl_g->right_8->value(0);
            fl_g->right_9->value(0);

            for(int i = 5; i < 9; i++)
                right_delay[i] = DELAY;

        }
        else
            right_delay[5]--;
    }

    if(right > TRESHOLD_7)
    {
        fl_g->right_1->value(1);
        fl_g->right_2->value(1);
        fl_g->right_3->value(1);
        fl_g->right_4->value(1);
        fl_g->right_5->value(1);
        fl_g->right_6->value(1);
        fl_g->right_7->value(1);

    }
    else
    {
        if(!right_delay[6])
        {
            fl_g->right_7->value(0);
            fl_g->right_8->value(0);
            fl_g->right_9->value(0);
            for(int i = 6; i < 9; i++)
                right_delay[i] = DELAY;

        }
        else
            right_delay[6]--;
    }
    if(right > TRESHOLD_8)
    {
        fl_g->right_1->value(1);
        fl_g->right_2->value(1);
        fl_g->right_3->value(1);
        fl_g->right_4->value(1);
        fl_g->right_5->value(1);
        fl_g->right_6->value(1);
        fl_g->right_7->value(1);
        fl_g->right_8->value(1);

    }
    else
    {
        if(!right_delay[7])
        {
            fl_g->right_8->value(0);
            fl_g->right_9->value(0);

             for(int i = 7; i < 9; i++)
                right_delay[i] = DELAY;

        }
        else
            right_delay[7]--;
    }

    if(right > TRESHOLD_9)
    {
        fl_g->right_1->value(1);
        fl_g->right_2->value(1);
        fl_g->right_3->value(1);
        fl_g->right_4->value(1);
        fl_g->right_5->value(1);
        fl_g->right_6->value(1);
        fl_g->right_7->value(1);
        fl_g->right_8->value(1);
        fl_g->right_9->value(1);
    }
    else
    {
        if(!right_delay[8])
        {
            fl_g->right_9->value(0);
            right_delay[8] = DELAY;
        }
        else
            right_delay[8]--;
    }

<<<<<<< /home/bip/programming/butt_working.hg/src/FLTK/fl_funcs.cpp
//    Fl::check();
=======
    //Fl::check();
>>>>>>> /tmp/fl_funcs.cpp~other.v3-MLF

}
